## Announcements

##  Practice

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

%config InlineBackend.figure_format = 'retina'
%precision 4
pd.options.display.float_format = '{:.4f}'.format

import yfinance as yf
import pandas_datareader as pdr
import requests_cache
session = requests_cache.CachedSession(expire_after=1)

### Plot the security market line (SML) for a variety of asset classes

Use the past three years of daily data for the following exhange traded funds (ETFs):

1. SPY (SPDR---Standard and Poor's Depository Receipts---ETF for the S&P 500 index)
1. BIL (SPDR ETF for 1-3 month Treasury bills)
1. GLD (SPDR ETF for gold)
1. JNK (SPDR ETF for high-yield debt)
1. MDY (SPDR ETF for S&P 400 mid-cap index)
1. SLY (SPDR ETF for S&P 600 small-cap index)
1. SPBO (SPDR ETF for corporate bonds)
1. SPMB (SPDR ETF for mortgage-backed securities)
1. SPTL (SPDR ETF for long-term Treasury bonds)

tickers = ['SPY', 'BIL', 'GLD', 'JNK', 'MDY', 'SLY', 'SPBO', 'SPMB', 'SPTL']

etf = (
    yf.download(
        tickers=tickers,
        progress=False
    )
    .assign(Date = lambda x: x.index.tz_localize(None))
    .set_index('Date')
    .rename_axis(columns=['Variable', 'Ticker'])
    ['Adj Close']
    .pct_change()
)

etf.tail()

ff = (
    pdr.DataReader(
        name='F-F_Research_Data_Factors_daily',
        data_source='famafrench',
        start='1900',
        session=session
    )
    [0]
    .rename_axis(columns='Variable')
    .div(100)
)

ff.tail()

def mean(ri, ann=252, mul=100):
    return mul * ann * ri.mean()

def beta(ri, rf=ff['RF'], rm_rf=ff['Mkt-RF']):
    ri_rf = ri.sub(rf).dropna()
    return ri_rf.cov(rm_rf) / rm_rf.loc[ri_rf.index].var()

def date_range(x):
    return f'{x.index[0]:%b %d, %Y} to {x.index[-1]:%b %d, %Y}'

import seaborn as sns

_ = (
    etf
    .iloc[-756:] # I forget to slice to 3 years in class
    .agg([mean, beta])
    .rename_axis(index='Statistic')
    .transpose()
)
 
sns.regplot(x='beta', y='mean', data=_)
for t, (x, y) in _[['beta', 'mean']].iterrows():
    plt.annotate(text=t, xy=(x, y)) # use a for-loop to add tickers

plt.ylabel('Annualized Mean of Daily Returns (%)')
plt.xlabel(r'Capital Asset Pricing Model (CAPM) $\beta$')
plt.title(
    'Security Market Line (SML) for Exchange Traded Funds (ETFs)\n' +
    'for Daily Returns from ' + etf.iloc[-756:].pipe(date_range))
plt.show()

### Plot the SML for the Dow Jones Industrial Average (DJIA) stocks

Use the past three years of daily returns data for the stocks listed on the [DJIA Wikipedia page](https://en.wikipedia.org/wiki/Dow_Jones_Industrial_Average).
Compare the DJIA SML to the asset class SML above.

wiki = pd.read_html('https://en.wikipedia.org/wiki/Dow_Jones_Industrial_Average')

djia = (
    yf.download(
        tickers=wiki[1]['Symbol'].to_list(),
        progress=False
    )
    .assign(Date = lambda x: x.index.tz_localize(None))
    .set_index('Date')
    .rename_axis(columns=['Variable', 'Ticker'])
    ['Adj Close']
    .pct_change()
    .dropna()
)

_ = (
    djia
    .iloc[-756:] # I forget to slice to 3 years in class
    .agg([mean, beta])
    .rename_axis(index='Statistic')
    .transpose()
)
 
sns.regplot(x='beta', y='mean', data=_)
for t, (x, y) in _[['beta', 'mean']].iterrows():
    plt.annotate(text=t, xy=(x, y)) # use a for-loop to add tickers

plt.ylabel('Annualized Mean of Daily Returns (%)')
plt.xlabel(r'Capital Asset Pricing Model (CAPM) $\beta$')
plt.title(
    'Security Market Line (SML) for Dow-Jones Stocks\n' +
    'for Daily Returns from ' + djia.iloc[-756:].pipe(date_range))
plt.show()

### Plot the SML for the five portfolios formed on beta

Download data for portfolios formed on $\beta$ (`Portfolios_Formed_on_BETA`) from Ken French.
For the value-weighted portfolios, plot realized returns versus $\beta$.
These data should elements `[2]` and `[6]`, respectively.

beta_0 = (
    pdr.DataReader(
        name='Portfolios_Formed_on_BETA',
        data_source='famafrench',
        start='1900',
        session=session
    )
)

print(beta_0['DESCR'])

ports = ['Lo 20', 'Qnt 2', 'Qnt 3', 'Qnt 4', 'Hi 20']

_ = (
    pd.concat(
        objs=[
            beta_0[2][ports],
            beta_0[6][ports].shift()
        ],
        keys=['Return', 'Beta'],
        names=['Statistic', 'Beta Portfolio'],
        axis=1
    )
    .stack('Beta Portfolio')
)

sns.regplot(x='Beta', y='Return', data=_)
plt.ylabel('Mean Annual Return (%)')
plt.xlabel(r'Capital Asset Pricing Model (CAPM) $\beta$')
plt.title(
    r'Security Market Line (SML) for $\beta$ Portfolios' +
    f'\nfor Annual Returns from {_.index.get_level_values(0).year[0]} to {_.index.get_level_values(0).year[-1]}'
)
plt.show()

### Estimate the CAPM $\beta$s on several levered and inverse exchange traded funds (ETFs)

Try the following ETFs:

1. SPY
1. UPRO
1. SPXU

Can you determine what these products do from the data alone?
Estimate $\beta$s and plot cumulative returns.
You may want to pick short periods of time with large market swings.

etf_2 = (
    yf.download(
        tickers='SPY UPRO SPXU',
        progress=False
    )
    .assign(Date = lambda x: x.index.tz_localize(None))
    .set_index('Date')
    .rename_axis(columns=['Variable', 'Ticker'])
    ['Adj Close']
    .pct_change()
    .dropna()
)

etf_2.apply(beta).rename(r'$\beta$')

etf_2.apply(beta).plot(kind='bar')
plt.xticks(rotation=0)
plt.ylabel(r'Capital Asset Pricing Model (CAPM) $\beta$')
plt.title(
    r'Capital Asset Pricing Model (CAPM) $\beta$s' + 
    f'\nfrom Daily Returns from {etf_2.pipe(date_range)}'
)
plt.show()

### Explore the size factor

#### Estimate $\alpha$s for the ten portfolios formed on size

Academics started researching size-based portfolios in the early 1980s, so you may want to focus on the pre-1980 sample.

size_0 = (
    pdr.DataReader(
        name='Portfolios_Formed_on_ME',
        data_source='famafrench',
        start='1900',
        session=session
    )
)

print(size_0['DESCR'])

ff_m = (
    pdr.DataReader(
        name='F-F_Research_Data_Factors',
        data_source='famafrench',
        start='1900',
        session=session
    )
)

print(ff_m['DESCR'])

ports = ['Lo 10', 'Dec 2', 'Dec 3', 'Dec 4', 'Dec 5', 'Dec 6', 'Dec 7', 'Dec 8', 'Dec 9', 'Hi 10']
joined = size_0[1][ports].join(ff_m[0])
joined.head()

import statsmodels.formula.api as smf

smf.ols('I(Q("Lo 10") - RF) ~ Q("Mkt-RF")', data=joined.loc[:'1979']).fit().summary()

models = [smf.ols(f'I(Q("{p}") - RF) ~ Q("Mkt-RF")', data=joined.loc[:'1979']) for p in ports]

fits = [m.fit() for m in models]

coefs = (
    pd.concat(
        objs=[f.params for f in fits], 
        axis=1, 
        keys=ports, 
        names='Size Portfolio'
    )
    .rename_axis(index='Coefficient', columns='Size Portfolio')
    .transpose()
)

We can get the standard errors, too.
The standard errors are in the `.params` attribute of our model fits.

ses = [f.bse[0] for f in fits]

coefs['Intercept'].plot(kind='bar', yerr=ses)
plt.ylabel(r'Monthly $\alpha$ (%) from CAPM')
plt.xticks(rotation=0)
plt.title(
    r'Size Portfolio CAPM $\alpha$s for Monthly Returns' +
    '\nfrom July 1926 through December 1979'
)
plt.show()

The size effect (i.e., the CAPM $\alpha$ for small stock portfolios) appears large!
We will dig a little deeper!

#### Are the returns on these ten portfolios formed on size concentrated in a specific month?

(
    size_0[0][ports]
    .groupby(lambda x: np.where(x.month==1, 'January', 'Not January'))
    .mean()
    .rename_axis(index='Month', columns='Equal-Weighted Size Portfolio')
    .plot(kind='bar')
)

plt.xticks(rotation=0)
plt.ylabel('Mean Monthly Return (%)')
plt.title('When Do We Earn Size-Effect Returns?')
plt.show()

We earn size effect returns in January!
The size effect is likely due to tax-loss harvesting in small stocks.

#### Compare the size factor to the market factor

You may want to consider mean excess returns by decade.

You may want to consider mean excess returns by decade.

(
    ff_m[0][['Mkt-RF', 'SMB']]
    .resample('10Y')
    .mean()
    .mul(12)
    .rename_axis(index='10-Year Period', columns='Factor')
    .plot(kind='bar')
)

plt.xticks(rotation=0)
plt.ylabel('Annualize Mean of Monthly Returns (%)')
plt.title('Comparison on Market Risk and Small Stock Premia')
plt.show()

The size factor (SMB) may have $\alpha$ early in the sample, but it rarely generates outsize returns.
Plus, the size factor has returned (effectively) zero the last two decades of the sample (2006-2015 and 2016-today).

### Repeat the exercises above with the value factor

hml_0 = pdr.DataReader(
    name='Portfolios_Formed_on_BE-ME',
    data_source='famafrench',
    start='1900',
    session=session
)

print(hml_0['DESCR'])

ports = ['Lo 10', 'Dec 2', 'Dec 3', 'Dec 4', 'Dec 5', 'Dec 6', 'Dec 7', 'Dec 8', 'Dec 9', 'Hi 10']
joined = hml_0[1][ports].join(ff_m[0])
joined.head()

models = [smf.ols(f'I(Q("{p}") - RF) ~ Q("Mkt-RF")', data=joined) for p in ports]

fits = [m.fit() for m in models]

coefs = (
    pd.concat(
        objs=[f.params for f in fits],
        axis=1,
        keys=ports
    )
    .rename_axis(index='Coefficient', columns='Equal-Weighted Value Portfolio')
    .transpose()
)

We can get the standard errors, too.
The standard errors are in the `.params` attribute of our model fits.

ses = [f.bse[0] for f in fits]

coefs['Intercept'].plot(kind='bar', yerr=ses)
plt.ylabel(r'Monthly $\alpha$ (%) from CAPM')
# plt.xticks(rotation=0)
plt.title(
    r'Value Portfolio CAPM $\alpha$s for Monthly Returns' +
    '\nfrom July 1926 through january 1979'
)
plt.show()

### Repeat the exercises above with the momentum factor

You may find it helpful to consider the worst months and years for the momentum factor.

mom_0 = pdr.DataReader(
    name='10_Portfolios_Prior_12_2',
    data_source='famafrench',
    start='1900',
    session=session
)

print(mom_0['DESCR'])

ports = ['Lo PRIOR', 'PRIOR 2', 'PRIOR 3', 'PRIOR 4', 'PRIOR 5', 'PRIOR 6', 'PRIOR 7', 'PRIOR 8', 'PRIOR 9', 'Hi PRIOR']
joined = mom_0[1][ports].join(ff_m[0])
joined.head()

models = [smf.ols(f'I(Q("{p}") - RF) ~ Q("Mkt-RF")', data=joined) for p in ports]

fits = [m.fit() for m in models]

coefs = (
    pd.concat(
        objs=[f.params for f in fits],
        axis=1,
        keys=ports
    )
    .rename_axis(index='Coefficient', columns='Equal-Weighted Momentum Portfolio')
    .transpose()
)

We can get the standard errors, too.
The standard errors are in the `.params` attribute of our model fits.

ses = [f.bse[0] for f in fits]

coefs['Intercept'].plot(kind='bar', yerr=ses)
plt.ylabel(r'Monthly $\alpha$ (%) from CAPM')
# plt.xticks(rotation=0)
plt.title(
    r'Momentum Portfolio CAPM $\alpha$s for Monthly Returns' +
    '\nfrom July 1926 through january 1979'
)
plt.show()

### Plot the coefficient estimates from a rolling Fama-French three-factor model for Berkshire Hathaway

Use a three-year window with daily returns.
How has Buffett's $\alpha$ and $\beta$s changed over the past four decades?

brk = (
    yf.download(tickers='BRK-A', progress=False)
    .assign(Date = lambda x: x.index.tz_localize(None))
    .set_index('Date')
    .rename_axis(columns=['Variable'])
    .assign(R=lambda x: x['Adj Close'].pct_change().mul(100))
    .dropna()
    .join(
        pdr.DataReader(
            name='F-F_Research_Data_Factors_daily',
            data_source='famafrench',
            start='1900',
            session=session
        )[0],
        how='inner'
    )
)

from statsmodels.regression.rolling import RollingOLS

coefs = (
    RollingOLS.from_formula(
        formula='I(R-RF) ~ Q("Mkt-RF") + SMB + HML',
        data=brk,
        window=3*252
    )
    .fit()
    .params
    .rename_axis(columns='Coefficient')
    .rename(columns={'Q("Mkt-RF")': 'Mkt-RF'})
)

fig, ax = plt.subplots(2, 1, sharex=True)
coefs['Intercept'].plot(ax=ax[0], legend=True)
coefs.drop('Intercept', axis=1).plot(ax=ax[1])
plt.suptitle(
    'Rolling Three-Factor Regressions' +
    '\nThree-Year Windows with Daily Returns in Percent'
)
plt.show()

Buffett's $\alpha$ was large, but has declined to zero.
Also, his loading on SMB (size factor) has gone from positive to negative, indicating that he has moved from small stocks to large stocks as Berkshire Hathaway has grown.
